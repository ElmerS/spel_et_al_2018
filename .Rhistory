t <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
t <- t + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
t <- t + scale_fill_gradient2(low = 'grey92', high = 'lightsteelblue1', limits=c(10,max(-log(screen$fcpv, 10))))
t <- t + scale_size_area(max_size = 15)
t <- t + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.1,1000))
t <- t + annotation_logticks(sides='l', scaled=T, size=1)
t <- t + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
t <- t + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
t <- t + geom_text(aes(label=ifelse((-log(screen$fcpv, 10)>10), as.character(screen$relgenename),'')), check_overlap = F, size=1, angle=45 ,hjust=0,vjust=0)
t <- t + theme_classic()
t <- t + ggtitle(screenname)
#make plots for full data
ggsave(filename = paste0(screenname, '_logall.pdf'), path=outdir, plot = t, device = 'pdf', width = 9 , height = 4)
#give two previews
#i <- grid.arrange(g,f)
}
datadir = '/Volumes/analyzed_data/data_for_papers/Staring_et_al_KREMEN/data/'
outdir = '/Volumes/analyzed_data/data_for_papers/Staring_et_al_KREMEN/script_output'
setwd(outdir)
w <- list.files(path = datadir)
for(i in w){
screen <- read.table(file= paste0(datadir, i) , header = TRUE, stringsAsFactors = FALSE, sep=",")
screenname <- unique(screen$relscreenname)
#seperate -logP <10 >10
A <- screen[which(-log(screen$fcpv, 10)>10),]
B <- screen[which(-log(screen$fcpv, 10)<10 & -log(screen$fcpv, 10)>0.01 ),]
#make linear plot
g <- ggplot(data=A, aes(x=A$seq, y=-log(A$fcpv, 10), size=A$nm, fill=-log(A$fcpv, 10), label = A$relgenename))
g <- g + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
g <- g + scale_fill_gradient(low = 'lightsteelblue1', high ='lightsteelblue2')
g <- g + scale_size_area(max_size = 15)
g <- g + scale_y_continuous(breaks=seq(0,400,10), limits =c(0,400))
g <- g + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
g <- g + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
g <- g + geom_text(check_overlap = F, size=1, angle=45, nudge_y = 20, fontface='bold', colour='grey23')
g <- g + theme_classic()
g <- g + ggtitle(screenname)
#make log noise plot between 0.01 and 10
f <- ggplot(data=B, aes(x=B$seq, y=-log(B$fcpv, 10), size=B$nm, fill=-log(B$fcpv, 10)))
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_size_area(max_size = 15)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,10))
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
#save as pdfs
ggsave(filename = paste0(screenname, '_lin.pdf'), path=outdir, plot = g, device = 'pdf', width = 9 , height = 4)
ggsave(filename = paste0(screenname, '_log.pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
#make linear plot for all
j <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
j <- j + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
j <- j + scale_fill_gradient2(low = 'grey92', high = 'lightsteelblue1', limits=c(10,max(-log(screen$fcpv, 10))))
j <- j + scale_size_area(max_size = 15)
j <- j + scale_y_continuous(breaks=seq(0,400,50), limits =c(0,400))
j <- j + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
j <- j + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
j <- j + geom_text(aes(label=ifelse((-log(screen$fcpv, 10)>10), as.character(screen$relgenename),'')), check_overlap = F, size=1, angle=45 ,hjust=0,vjust=0)
j <- j + theme_classic()
j <- j + ggtitle(screenname)
#make plots for full data
ggsave(filename = paste0(screenname, '_all.pdf'), path=outdir, plot = j, device = 'pdf', width = 9 , height = 4)
#give two previews
#i <- grid.arrange(g,f)
}
screen
dim(screen)
dim(A)
dim(V)
dim(B)
-log(8.812790e-01, 10)
B
screen[which(-log(screen$fcpv, 10)>10),]==10
screen[which(-log(screen$fcpv, 10)==10),]
screen[which(-log(screen$fcpv, 10)>=10),]
A <- screen[which(-log(screen$fcpv, 10)>=10),]
A
dim(A)
A <- screen[which(-log(screen$fcpv, 10)<0.01),]
A
dim(A)
log(1, 10)
log(0.0001, 10)
log(0.1, 10)
-log(0.1, 10)
-log(0.001, 10)
-log(0.000001, 10)
-log(1, 10)
-log(0.01, 10)
-log(0.1, 10)
-log(0.0001, 10)
-log(10, 10)
-log(1, 10)
-log(0.01, 10)
-log(0.00001, 10)
-log(1e-10, 10)
-log(1, 10)
-log(0.1, 10)
-log(0.8, 10)
-log(0.9, 10)
-log(0.91, 10)
-log(0.99, 10)
0.01^10
-0.01^10
0.01^10
0.01^10
log19
log(10)
log(10,10)
log(100,10)
log(0.5,10)
log(1,10)
log(0.1,10)
log(20,10)
log(9,10)
log(1,10)
log(1.1,10)
log(0.9,10)
log(0.000001, 10)
log(0.9999,10)
log(0.8,10)
log(0.6,10)
log(0.6,10)
log(0.5,10)
0.01^10
10^0.01
10^-0.01
10^-10
f <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10))) # This is wrong! dimensions for x and y should match!
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_size_area(max_size = 15)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,10))
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_log-vol.pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
B <- screen[which(-log(screen$fcpv, 10)<10),]# & -log(screen$fcpv, 10)>0.01 ),] # So this is all p-values between 1e-10 and 0.9772372 (10^-0.01)
B <- screen[which(-log(screen$fcpv, 10)<10),]# & -log(screen$fcpv, 10)>0.01 ),] # So this is all p-values between 1e-10 and 0.9772372 (10^-0.01)
f <- ggplot(data=B, aes(x=B$seq, y=-log(B$fcpv, 10), size=B$nm, fill=-log(B$fcpv, 10)))
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_size_area(max_size = 15)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,10))
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_log.pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
j <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
B <- screen[which(-log(screen$fcpv, 10)<10 & -log(screen$fcpv, 10)>0.01 ),] # So this is all p-values between 1e-10 and 0.9772372 (10^-0.01)
f <- ggplot(data=B, aes(x=B$seq, y=-log(B$fcpv, 10), size=B$nm, fill=-log(B$fcpv, 10)))
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_size_area(max_size = 15)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,10))
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_log.pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
f <- ggplot(data=B, aes(x=B$seq, y=-log(B$fcpv, 10), size=B$nm, fill=-log(B$fcpv, 10)))
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_size_area(max_size = 15)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,100))
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_log.pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,20)) # c(lower, upper limit Y-scale)
f <- ggplot(data=B, aes(x=B$seq, y=-log(B$fcpv, 10), size=B$nm, fill=-log(B$fcpv, 10)))
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_size_area(max_size = 15)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,20)) # c(lower, upper limit Y-scale)
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_log.pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,30)) # c(lower, upper limit Y-scale)
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_log.pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
f <- ggplot(data=B, aes(x=B$seq, y=-log(B$fcpv, 10), size=B$nm, fill=-log(B$fcpv, 10)))
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_size_area(max_size = 15)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,30)) # c(lower, upper limit Y-scale)
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_log.pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
for(i in w){
screen <- read.table(file= paste0(datadir, i) , header = TRUE, stringsAsFactors = FALSE, sep=",")
screenname <- unique(screen$relscreenname)
# Extract datapoints whose -log10() converted fdr-corrected p-values are larger than 10 (A)
# and those smaller than 10 but larger than 0.01 (B)
A <- screen[which(-log(screen$fcpv, 10)>=10),] # one of both should be include the border otherwise there's a chance of losing genes
B <- screen[which(-log(screen$fcpv, 10)<10 & -log(screen$fcpv, 10)>0.01 ),] # So this is all p-values between 1e-10 and 0.9772372 (10^-0.01)
# Create a plot (g) with linear Y-scale from all datapoints with a -log10(fcpv) >= 10 (dataset A)
g <- ggplot(data=A, aes(x=A$seq, y=-log(A$fcpv, 10), size=A$nm, fill=-log(A$fcpv, 10), label = A$relgenename))
g <- g + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
g <- g + scale_fill_gradient(low = 'lightsteelblue1', high ='lightsteelblue2')
g <- g + scale_size_area(max_size = 15)
g <- g + scale_y_continuous(breaks=seq(0,400,10), limits =c(0,400))
g <- g + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
g <- g + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
g <- g + geom_text(check_overlap = F, size=1, angle=45, nudge_y = 20, fontface='bold', colour='grey23')
g <- g + theme_classic()
g <- g + ggtitle(screenname)
# Store the plot to pdf called <screenname>_linear_scale_datapoints_fcpv_equal_or_bigger_than_-10log(1e-10).pdf
ggsave(filename = paste0(screenname, '_linear_scale_datapoints_fcpv_equal_smaller_than_1e-10.pdf'), path=outdir, plot = g, device = 'pdf', width = 9 , height = 4)
# Create a plot (f) with logaritmic Y-scale from all datapoints between 0.01 and 10 (dataset B)
f <- ggplot(data=B, aes(x=B$seq, y=-log(B$fcpv, 10), size=B$nm, fill=-log(B$fcpv, 10)))
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_size_area(max_size = 15)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,30)) # c(lower limit, upper limit Y-scale)
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
# Store the plot to pdf called <screenname>_10log_scale_datapoints_fcpv_between_-10log(1e-10)_and_-10log(10^-0.01).pdf
ggsave(filename = paste0(screenname, '_10log_scale_datapoints_fcpv_between_-10log(1e-10)_and_-10log(10^-0.01).pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
# Create a plot (j) with linear Y-scale from all datapoints
j <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
j <- j + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
j <- j + scale_fill_gradient2(low = 'grey92', high = 'lightsteelblue1', limits=c(10,max(-log(screen$fcpv, 10))))
j <- j + scale_size_area(max_size = 15)
j <- j + scale_y_continuous(breaks=seq(0,400,50), limits =c(0,400))
j <- j + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
j <- j + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
j <- j + geom_text(aes(label=ifelse((-log(screen$fcpv, 10)>10), as.character(screen$relgenename),'')), check_overlap = F, size=1, angle=45 ,hjust=0,vjust=0)
j <- j + theme_classic()
j <- j + ggtitle(screenname)
# Store the plot to pdf called <screenname>_linear_scale_all_datapoints.pdf
ggsave(filename = paste0(screenname, '_linear_scale_all_datapoints.pdf'), path=outdir, plot = j, device = 'pdf', width = 9 , height = 4)
#give two previews
t <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
t <- t + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
t <- t + scale_fill_gradient2(low = 'grey92', high = 'lightsteelblue1', limits=c(10,max(-log(screen$fcpv, 10))))
t <- t + scale_size_area(max_size = 15)
t <- t + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.1,1000))
t <- t + annotation_logticks(sides='l', scaled=T, size=1)
t <- t + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
t <- t + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
t <- t + geom_text(aes(label=ifelse((-log(screen$fcpv, 10)>10), as.character(screen$relgenename),'')), check_overlap = F, size=1, angle=45 ,hjust=0,vjust=0)
t <- t + theme_classic()
t <- t + ggtitle(screenname)
# Store the plot to pdf called <screenname>_10log_scale_all_datapoints.pdf
ggsave(filename = paste0(screenname, '_10log_scale_all_datapoints.pdf'), path=outdir, plot = t, device = 'pdf', width = 9 , height = 4)
#give two previews
#i <- grid.arrange(g,f)
}
w <- list.files(path = datadir)
for(i in w){
screen <- read.table(file= paste0(datadir, i) , header = TRUE, stringsAsFactors = FALSE, sep=",")
screenname <- unique(screen$relscreenname)
# Extract datapoints whose -log10() converted fdr-corrected p-values are larger than 10 (A)
# and those smaller than 10 but larger than 0.01 (B)
A <- screen[which(-log(screen$fcpv, 10)>=10),] # one of both should be include the border otherwise there's a chance of losing genes
B <- screen[which(-log(screen$fcpv, 10)<10 & -log(screen$fcpv, 10)>0.01 ),] # So this is all p-values between 1e-10 and 0.9772372 (10^-0.01)
# Create a plot (g) with linear Y-scale from all datapoints with a -log10(fcpv) >= 10 (dataset A)
g <- ggplot(data=A, aes(x=A$seq, y=-log(A$fcpv, 10), size=A$nm, fill=-log(A$fcpv, 10), label = A$relgenename))
g <- g + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
g <- g + scale_fill_gradient(low = 'lightsteelblue1', high ='lightsteelblue2')
g <- g + scale_size_area(max_size = 15)
g <- g + scale_y_continuous(breaks=seq(0,400,10), limits =c(0,400))
g <- g + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
g <- g + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
g <- g + geom_text(check_overlap = F, size=1, angle=45, nudge_y = 20, fontface='bold', colour='grey23')
g <- g + theme_classic()
g <- g + ggtitle(screenname)
# Store the plot to pdf called <screenname>_linear_scale_datapoints_fcpv_equal_or_bigger_than_-10log(1e-10).pdf
ggsave(filename = paste0(screenname, '_linear_scale_datapoints_fcpv_equal_smaller_than_1e-10.pdf'), path=outdir, plot = g, device = 'pdf', width = 9 , height = 4)
# Create a plot (f) with logaritmic Y-scale from all datapoints between 0.01 and 10 (dataset B)
f <- ggplot(data=B, aes(x=B$seq, y=-log(B$fcpv, 10), size=B$nm, fill=-log(B$fcpv, 10)))
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_size_area(max_size = 15)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,30)) # c(lower limit, upper limit Y-scale)
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
# Store the plot to pdf called <screenname>_10log_scale_datapoints_fcpv_between_-10log(1e-10)_and_-10log(10^-0.01).pdf
ggsave(filename = paste0(screenname, '_10log_scale_datapoints_fcpv_between_-10log(1e-10)_and_-10log(10^-0.01).pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
# Create a plot (j) with linear Y-scale from all datapoints
j <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
j <- j + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
j <- j + scale_fill_gradient2(low = 'grey92', high = 'lightsteelblue1', limits=c(10,max(-log(screen$fcpv, 10))))
j <- j + scale_size_area(max_size = 15)
j <- j + scale_y_continuous(breaks=seq(0,400,50), limits =c(0,400))
j <- j + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
j <- j + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
j <- j + geom_text(aes(label=ifelse((-log(screen$fcpv, 10)>10), as.character(screen$relgenename),'')), check_overlap = F, size=1, angle=45 ,hjust=0,vjust=0)
j <- j + theme_classic()
j <- j + ggtitle(screenname)
# Store the plot to pdf called <screenname>_linear_scale_all_datapoints.pdf
ggsave(filename = paste0(screenname, '_linear_scale_all_datapoints.pdf'), path=outdir, plot = j, device = 'pdf', width = 9 , height = 4)
# Create a plot (t) with logaritmic Y-scale from all datapoints
t <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
t <- t + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
t <- t + scale_fill_gradient2(low = 'grey92', high = 'lightsteelblue1', limits=c(10,max(-log(screen$fcpv, 10))))
t <- t + scale_size_area(max_size = 15)
t <- t + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.1,1000))
t <- t + annotation_logticks(sides='l', scaled=T, size=1)
t <- t + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
t <- t + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
t <- t + geom_text(aes(label=ifelse((-log(screen$fcpv, 10)>10), as.character(screen$relgenename),'')), check_overlap = F, size=1, angle=45 ,hjust=0,vjust=0)
t <- t + theme_classic()
t <- t + ggtitle(screenname)
# Store the plot to pdf called <screenname>_10log_scale_all_datapoints.pdf
ggsave(filename = paste0(screenname, '_10log_scale_all_datapoints.pdf'), path=outdir, plot = t, device = 'pdf', width = 9 , height = 4)
#give two previews
#i <- grid.arrange(g,f)
}
for(i in w){
screen <- read.table(file= paste0(datadir, i) , header = TRUE, stringsAsFactors = FALSE, sep=",")
screenname <- unique(screen$relscreenname)
# Extract datapoints whose -log10() converted fdr-corrected p-values are larger than 10 (A)
# and those smaller than 10 but larger than 0.01 (B)
A <- screen[which(-log(screen$fcpv, 10)>=10),] # one of both should be include the border otherwise there's a chance of losing genes
B <- screen[which(-log(screen$fcpv, 10)<10 & -log(screen$fcpv, 10)>0.01 ),] # So this is all p-values between 1e-10 and 0.9772372 (10^-0.01)
# Create a plot (g) with linear Y-scale from all datapoints with a -log10(fcpv) >= 10 (dataset A)
g <- ggplot(data=A, aes(x=A$seq, y=-log(A$fcpv, 10), size=A$nm, fill=-log(A$fcpv, 10), label = A$relgenename))
g <- g + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
g <- g + scale_fill_gradient(low = 'lightsteelblue1', high ='lightsteelblue2')
g <- g + scale_size_area(max_size = 15)
g <- g + scale_y_continuous(breaks=seq(0,400,10), limits =c(0,400))
g <- g + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
g <- g + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
g <- g + geom_text(check_overlap = F, size=1, angle=45, nudge_y = 20, fontface='bold', colour='grey23')
g <- g + theme_classic()
g <- g + ggtitle(screenname)
# Store the plot to pdf called <screenname>_linear_scale_datapoints_fcpv_equal_or_bigger_than_-10log(1e-10).pdf
ggsave(filename = paste0(screenname, '_linear_scale_datapoints_fcpv_equal_or_bigger_than_-10log(1e-10).pdf'), path=outdir, plot = g, device = 'pdf', width = 9 , height = 4)
# Create a plot (f) with logaritmic Y-scale from all datapoints between 0.01 and 10 (dataset B)
f <- ggplot(data=B, aes(x=B$seq, y=-log(B$fcpv, 10), size=B$nm, fill=-log(B$fcpv, 10)))
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_size_area(max_size = 15)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,30)) # c(lower limit, upper limit Y-scale)
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
# Store the plot to pdf called <screenname>_10log_scale_datapoints_fcpv_between_-10log(1e-10)_and_-10log(10^-0.01).pdf
ggsave(filename = paste0(screenname, '_10log_scale_datapoints_fcpv_between_-10log(1e-10)_and_-10log(10^-0.01).pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
# Create a plot (j) with linear Y-scale from all datapoints
j <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
j <- j + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
j <- j + scale_fill_gradient2(low = 'grey92', high = 'lightsteelblue1', limits=c(10,max(-log(screen$fcpv, 10))))
j <- j + scale_size_area(max_size = 15)
j <- j + scale_y_continuous(breaks=seq(0,400,50), limits =c(0,400))
j <- j + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
j <- j + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
j <- j + geom_text(aes(label=ifelse((-log(screen$fcpv, 10)>10), as.character(screen$relgenename),'')), check_overlap = F, size=1, angle=45 ,hjust=0,vjust=0)
j <- j + theme_classic()
j <- j + ggtitle(screenname)
# Store the plot to pdf called <screenname>_linear_scale_all_datapoints.pdf
ggsave(filename = paste0(screenname, '_linear_scale_all_datapoints.pdf'), path=outdir, plot = j, device = 'pdf', width = 9 , height = 4)
# Create a plot (t) with logaritmic Y-scale from all datapoints
t <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
t <- t + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
t <- t + scale_fill_gradient2(low = 'grey92', high = 'lightsteelblue1', limits=c(10,max(-log(screen$fcpv, 10))))
t <- t + scale_size_area(max_size = 15)
t <- t + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.1,1000))
t <- t + annotation_logticks(sides='l', scaled=T, size=1)
t <- t + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
t <- t + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
t <- t + geom_text(aes(label=ifelse((-log(screen$fcpv, 10)>10), as.character(screen$relgenename),'')), check_overlap = F, size=1, angle=45 ,hjust=0,vjust=0)
t <- t + theme_classic()
t <- t + ggtitle(screenname)
# Store the plot to pdf called <screenname>_10log_scale_all_datapoints.pdf
ggsave(filename = paste0(screenname, '_10log_scale_all_datapoints.pdf'), path=outdir, plot = t, device = 'pdf', width = 9 , height = 4)
#give two previews
#i <- grid.arrange(g,f)
}
-
screen <- read.table(file= paste0(datadir, i) , header = TRUE, stringsAsFactors = FALSE, sep=",")
screenname <- unique(screen$relscreenname)
screen <- read.table(file= paste0(datadir, i) , header = TRUE, stringsAsFactors = FALSE, sep=",")
screenname <- unique(screen$relscreenname)
A <- screen[which(-log(screen$fcpv, 10)>=10),] # one of both should be include the border otherwise there's a chance of losing genes
B <- screen[which(-log(screen$fcpv, 10)<10 & -log(screen$fcpv, 10)>0.01 ),] # So this is all p-values between 1e-10 and 0.9772372 (10^-0.01)
g <- ggplot(data=A, aes(x=A$seq, y=-log(A$fcpv, 10), size=A$nm, fill=-log(A$fcpv, 10), label = A$relgenename))
g <- g + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
g <- g + scale_fill_gradient(low = 'lightsteelblue1', high ='lightsteelblue2')
g <- g + scale_size_area(max_size = 15)
g <- g + scale_y_continuous(breaks=seq(0,400,10), limits =c(0,400))
g <- g + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
g <- g + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
g <- g + geom_text(check_overlap = F, size=1, angle=45, nudge_y = 20, fontface='bold', colour='grey23')
g <- g + theme_classic()
g <- g + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_linear_scale_datapoints_fcpv_equal_or_bigger_than_-10log(1e-10).pdf'), path=outdir, plot = g, device = 'pdf', width = 9 , height = 4)
f <- ggplot(data=B, aes(x=B$seq, y=-log(B$fcpv, 10), size=B$nm, fill=-log(B$fcpv, 10)))
f <- f + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
f <- f + scale_fill_gradient(low = 'grey92', high ='white')
f <- f + scale_size_area(max_size = 15)
f <- f + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.01,30)) # c(lower limit, upper limit Y-scale)
f <- f + annotation_logticks(sides='l', scaled=T, size=1)
f <- f + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
f <- f + theme_classic()
f <- f + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_10log_scale_datapoints_fcpv_between_-10log(1e-10)_and_-10log(10^-0.01).pdf'), path=outdir, plot = f, device = 'pdf', width = 9 , height = 2)
j <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
j <- j + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
j <- j + scale_fill_gradient2(low = 'grey92', high = 'lightsteelblue1', limits=c(10,max(-log(screen$fcpv, 10))))
j <- j + scale_size_area(max_size = 15)
j <- j + scale_y_continuous(breaks=seq(0,400,50), limits =c(0,400))
j <- j + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
j <- j + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
j <- j + geom_text(aes(label=ifelse((-log(screen$fcpv, 10)>10), as.character(screen$relgenename),'')), check_overlap = F, size=1, angle=45 ,hjust=0,vjust=0)
j <- j + theme_classic()
j <- j + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_linear_scale_all_datapoints.pdf'), path=outdir, plot = j, device = 'pdf', width = 9 , height = 4)
t <- ggplot(data=screen, aes(x=screen$seq, y=-log(screen$fcpv, 10), size=screen$nm, fill=-log(screen$fcpv, 10), label = screen$relgenename))
t <- t + geom_point(shape=21, color='black', stroke=0.25, alpha=0.75)
t <- t + scale_fill_gradient2(low = 'grey92', high = 'lightsteelblue1', limits=c(10,max(-log(screen$fcpv, 10))))
t <- t + scale_size_area(max_size = 15)
t <- t + scale_y_log10(minor_breaks = trans_breaks("log10", function(x) 10^x), limits = c(0.1,1000))
t <- t + annotation_logticks(sides='l', scaled=T, size=1)
t <- t + theme(axis.line = element_line(colour = 'black', size = 1), axis.ticks = element_line(colour = 'black', size = 1))
t <- t + geom_hline(yintercept = 10, size=1, color='red', linetype='dashed')
t <- t + geom_text(aes(label=ifelse((-log(screen$fcpv, 10)>10), as.character(screen$relgenename),'')), check_overlap = F, size=1, angle=45 ,hjust=0,vjust=0)
t <- t + theme_classic()
t <- t + ggtitle(screenname)
ggsave(filename = paste0(screenname, '_10log_scale_all_datapoints.pdf'), path=outdir, plot = t, device = 'pdf', width = 9 , height = 4)
}
log(1, 10)
log(1e-300, 10)
log(1e-330, 10)
-log(1e-330, 10)
A
max(A)
max(A$fcpv)
min(A$fcpv)
log(min(A$fcpv), 10)
-log(min(A$fcpv), 10)
-log(min(screen$fcpv), 10)
-log(msx(screen$fcpv), 10)
-log(max(screen$fcpv), 10)
max(screen$nm)
min(screen$nm)
biocLite("DESeq2")
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
c(0.25, 0.1, 0.05, 0.05)
matrix(c(0.25, 0.1, 0.05, 0.05))
matrix(c(0.25, 0.1, 0,20)
matrix(c(0.25, 0.1, 0,20))
matrix(c(0.25, 0.1, 0,20))
matrix(c(0.25, 0.1, 0,20), c(0.1, 0.05, 0.00))
matrix(c(0.25, 0.1, 0,20), c(0.1, 0.05, 0,00))
matrix(c(0.25, 0.1, 0,20), c(0.1, 0.05, 0,00))
matrix(c(0.25, 0.1, 0,20)
matrix(c(0.25, 0.1, 0,20)
)
matrix(c(0.25, 0.1, 0,20))
matrix(c(0.25, 0.1, 0.20))
matrix(c(0.25, 0.1, 0.20), c(0.1, 0.05, 0)
matrix(c(0.25, 0.1, 0.20), c(0.1, 0.05, 0)
)
matrix(c(0.25, 0.1, 0.20), c(0.1, 0.05, 0))
?matrix
matrix(c(0.25, 0.10, 0.05, 0.05, 0.1, 0.05, 0, 0.1, 0.2, 0, 0.1, 0), nrow=3)
matrix(c(0.25, 0.10, 0.05, 0.05, 0.1, 0.05, 0, 0.1, 0.2, 0, 0.1, 0), nrow=3, byrow=T)
M <- matrix(c(0.25, 0.10, 0.05, 0.05, 0.1, 0.05, 0, 0.1, 0.2, 0, 0.1, 0), nrow=3, byrow=T)
covar(m)
cov(m)
m
cov(M)
?cov
sum(cov(M))
M
cov(x=M)
cov(x=M, y=M)
source("https://bioconductor.org/biocLite.R")
library("DESeq2")
library("IRanges")
setwd("/Users/e.stickel/surfdrive_nki/Spel_et_al_MS_2017/")
guides_table <- read.table('unique_guides_underscore.txt', col.names='sgRNA')
guides_table <- read.table('unique_guides_underscore.txt', col.names='sgRNA')
pos_rep_1_table <- read.table('3616_4.counts', header=F, col.names = c('P1', 'sgRNA'))
pos_rep_2_table <- read.table('4470_2.counts', header=F, col.names = c('P2', 'sgRNA'))
neg_rep_1_table <- read.table('3616_1.counts', header=F, col.names = c('N1', 'sgRNA'))
neg_rep_2_table <- read.table('4470_1.counts', header=F, col.names = c('N2', 'sgRNA'))
countdata_df <- Reduce(function(...) merge(..., all=TRUE, by='sgRNA'), list(guides_table, pos_rep_1_table, pos_rep_2_table, neg_rep_1_table, neg_rep_2_table))
rownames(countdata_df) <- countdata_df$sgRNA
countdata_df[is.na(countdata_df)] <- 0
countdata <- data.matrix(within(countdata_df, rm('sgRNA')))
population <- factor(c(rep("pos", 2), rep("neg", 2)))
coldata <- data.frame(row.names=colnames(countdata), population)
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~population)
dds <- DESeq(dds)
res <- results(dds) # Get the results
mcols(res, use.names = TRUE)
res <- lfcShrink(dds, contrast=c("population","pos","neg"), res=res)
resOrdered <- res[order(res$padj),]
resOrderedDF <- as.data.frame(resOrdered)
write.csv(resOrderedDF, file = "results.csv")
write.csv(resOrderedDF, file = "intermediate_results.csv")
